#!/usr/bin/perl
use strict;
use warnings;

use lib qw( . .. lib ../lib );
use RHNC;
use RHNC::Session;
use Carp;
use Getopt::Long qw(GetOptionsFromArray);
use Data::Dumper;

use vars qw($rhnc);

#
# Subs
#
sub create {
    my @args = @_;

    # FIXME : this cannot work as it is. Add argument parsing here
    # using Getopt::Long
    RHNC::Org->create( rhnc => $rhnc, @args );
}

sub destroy {
    my @args = @_;

    foreach my $kname (@args) {
        my $org = RHNC::Org->get( $rhnc, $kname );
        if ( defined $org ) {
            $org->delete( $rhnc, $kname );
        }
    }
}

sub list {
    my @args = @_;
    my ( $verbose, $reactivationkey );

    my $result = GetOptionsFromArray(
        \@args,
        'verbose|v'          => \$verbose,
        'reactivationkeys|r' => \$reactivationkey,
    );

    my @orgl = RHNC::Org->list($rhnc);

    my $nr = 0;
    foreach my $org (@orgl) {
        my $desc = $org->name();
        printf( "%-36s \n", $org->name() );
        print Dumper $org if $verbose;
    }
    print "\n" . scalar(@orgl) . " activation or reactivation keys\n";
}

#
# Main
#

$rhnc = RHNC::Session->new();
print "API version : ", $rhnc->apiversion(), " | ";
print "Org ID : ",      $rhnc->org_id(),     "\n";

my @args = @ARGV;
my $cmd  = shift @args;

SWITCH: for ($cmd) {

    #    /create/  && create(@args) && last SWITCH;
    /^(?:l|li|lis|list)$/ && list(@args) && last SWITCH;

    #    /destroy/ && destroy(@args) && last SWITCH;

    croak "no valid command given";
}

