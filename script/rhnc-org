#!/usr/bin/perl
use strict;
use warnings;

use lib qw( . .. lib ../lib );
use RHNC;
use RHNC::Session;
use Carp;
use Getopt::Long qw(GetOptionsFromArray);
use Pod::Usage;
use Data::Dumper;

use vars qw($rhnc);

=head1 NAME

rhnc-org - Operate on Satellite managed organisations

=head1 USAGE

  rhnc-org command [options or parameters]

=head1 REQUIRED ARGUMENTS

At least command is required for this script to operate. No shell is
currently offered, although this may come in the future.

=head1 DESCRIPTION

The following commands are available:

=cut

sub _usage {
    pod2usage( -verbose => 2 );
}

=head2 create 

Create a new organisation in Satellite.

  rhnc-org create orgname -l login -p password -x prefix -f firstname \
                          -n lastname -e email

  rhnc-org create orgname --login login --password password --prefix prefix \
                    --firstname firstname --lastname lastname --email email

=cut

sub create {
    my @args = @_;
    my ( $orgname, $login, $password, $prefix, $firstname, $lastname, $email );

    my $result = GetOptionsFromArray(
        \@args,
        'l|login=s'      => \$login,
        'p|password=s'   => \$password,
        'x|prefix=s'     => \$prefix,
        'f|firstname=s'  => \$firstname,
        'n|lastname=s'   => \$lastname,
        'e|email|mail=s' => \$email,
      )
      or pod2usage(
        -exitval => 1,
        -message => 'Wrong parameters for create',
        -verbose => 1
      );

    # Get remaining args (org name)
    $orgname = shift @args;

    my $org = RHNC::Org->create(
        rhnc      => $rhnc,
        name      => $orgname,
        login     => $login,
        password  => $password,
        prefix    => $prefix,
        firstname => $firstname,
        lastname  => $lastname,
        email     => $email,
        usepam    => 0,
    );

    croak "Creating org $orgname failed" if not defined $org;

    print "Org $orgname created\n";
    return 0;
}

=head2 destroy

Destroy an organisation, by name or id.

  rhnc-org destroy orgname
  rhnc-org destroy orgid

=cut

sub destroy {
    my @args = @_;

    foreach my $org_id_or_name (@args) {
        my $org = RHNC::Org->get( $rhnc, $org_id_or_name );
        $org->destroy( $rhnc );
#        if ( defined $org ) {
#            ... destroy
#        }
#        else {
#            print "Non existing org : $org_id_or_name\n";
#            return 1;
#        }
    }

    return 0;
}

=head2 l|list

List organisations

  rhnc-org l
  rhnc-org list
  rhnc-org list -v  # not yet implemented

=cut

sub list {
    my @args = @_;
    my ( $verbose, $reactivationkey );

    my $result = GetOptionsFromArray( \@args, 'verbose|v' => \$verbose, );

    my $orgl = RHNC::Org->list($rhnc);

    my $nr = 0;
    foreach my $org (@$orgl) {
        my $desc = $org->name;
        printf( "%-36s \n", $org->name );
        print Dumper $org if $verbose;
    }
    print "\n" . scalar(@$orgl) . " organisation(s)\n";

    return 0;
}

=head2 get

Get information about organisation, by name or id.

  rhnc-org get orgname
  rhnc-org get orgid

=cut

sub get {
    my @args = @_;

    my $orgname = shift @args;

    my $org = RHNC::Org->get( $rhnc, $orgname );
    delete $org->{rhnc};

    foreach my $i (
        qw( name id kickstart_profiles systems configuration_channels
        active_users activation_keys system_groups )
      )
    {
        print "$i: " . $org->$i() . "\n";
    }

    return 0;
}

=head1 OPTIONS

See the various commands for options available.
Use C<rhnc-org help> for more help.

=head1 DIAGNOSTICS

See L<EXIT STATUS>.

=head1 EXIT STATUS

TODO. 
This script will return 1 for success, 0 for failure. Not very
consistent for now, likely to change.

=head1 CONFIGURATION

See L<RHNC>.

=head1 DEPENDENCIES

=over 4

=item * L<RHNC>

=item * L<Pod::Usage>

=back

=head1 INCOMPATIBILITIES

See L<RHNC>.

=head1 BUGS AND LIMITATIONS

See L<RHNC>.

=head1 AUTHOR

Jérôme Fenal L<< <jfenal@redhat.com> >>.

=head1 LICENSE AND COPYRIGHT

Copyright 2009, 2010 Jérôme Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

$rhnc = RHNC::Session->new();

my @args = @ARGV;
my $cmd  = shift @args;
my $rc   = 0;

my %func = (
    create  => \&create,
    l       => \&list,
    list    => \&list,
    destroy => \&destroy,
    h       => \&_usage,
    help    => \&_usage,
    get     => \&get,
);

SWITCH: foreach my $c ($cmd) {
    if ( defined $c && defined $func{$c} ) {
        $rc = $func{$c}->(@args);
        last SWITCH;
    }
    else {
        pod2usage( -exitval => 0, -message => "No or unknown command given" );
    }
}

exit $rc;

