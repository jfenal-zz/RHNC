#!/usr/bin/perl
#
# $Id$
#

use strict;
use warnings;

use lib qw( . .. lib ../lib );
use RHNC;
use Pod::Usage;
use Carp;
use Getopt::Long qw(GetOptionsFromArray);
use Data::Dumper;

use vars qw( $rhnc );

=head1 NAME

rhnc-system - Operate on Satellite managed systems

=head1 USAGE

  rhnc-system command [options or parameters]

=head1 REQUIRED ARGUMENTS

At least command is required for this script to operate. No shell is
currently offered, although this may come in the future.

=head1 DESCRIPTION

The following commands are available:

=cut

=head2 destroy

Destroy a system profile

=cut

sub destroy {
    my @args = @_;
    my $verbose;

    my $result = GetOptionsFromArray( \@args, 'verbose|v+' => \$verbose, )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/destroy'],
      );

    carp "not implemented yet";
    foreach my $kname (@args) {
        my $sys = RHNC::System->get( $rhnc, $kname );
        if ( defined $sys ) {
            $sys->destroy( $rhnc, $kname );
        }
    }

    return 0;
}

=head2 get_details

Print detailed information about the given system

  rhnc-system gd [-v] profilename
  rhnc-system get [-v] profilename
  rhnc-system get_details [-v] profilename

=cut

sub get_details {
    my @args = @_;
    my $sys;
    my $verbose = 0;

    my $result = GetOptionsFromArray( \@args, 'verbose|v+' => \$verbose, )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/get_details'],
      );

    while ( $sys = shift @args ) {
        my $system = RHNC::System::get( $rhnc, $sys );
        $system->entitlements;
        if ($verbose == 1 ) {
            $system->get_details;
        }
        elsif ($verbose == 2 ) {
            $system->running_kernel;
        }
        elsif ($verbose == 3 ) {
            $system->custom_values;
            $system->cpu;
            $system->dmi;
            $system->devices;
        }

        print $system->as_string;

    }

    return 0;
}

=head2 list

List system groups

  rhnc-system l [-v]
  rhnc-system list [-v]

=cut

sub list {
    my @args = @_;
    my ($verbose);

    my $result = GetOptionsFromArray( \@args, 'verbose|v+' => \$verbose, )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/list'],
      );

    my $slist = RHNC::System->list($rhnc);

    my $nr = 0;
    foreach my $sys ( keys %{$slist} ) {
        printf( "%10d %-40s %s\n",
            $slist->{$sys}{id},
            $slist->{$sys}{name},
            $slist->{$sys}{last_checkin}->value );
    }
    print "\nTotal: " . scalar( keys %$slist ) . " systems\n"
      if $verbose;

    return 0;
}

=head2 rm_system

TODO

=cut

sub rm_system {
    my @args = @_;

    carp "not implemented yet";

    return 0;
}

=head1 OPTIONS

See various commands for options available.

=head1 DIAGNOSTICS

See L<EXIT STATUS>.

=head1 EXIT STATUS

TODO. 
This script will return 1 for success, 0 for failure. Not very
consistent for now, likely to change.

=head1 CONFIGURATION

See L<RHNC>.

=head1 DEPENDENCIES

=over 4

=item * L<RHNC>

=item * L<Pod::Usage>

=back

=head1 INCOMPATIBILITIES

See L<RHNC>.

=head1 BUGS AND LIMITATIONS

See L<RHNC>.

=head1 AUTHOR

Jérôme Fenal L<< <jfenal@redhat.com> >>.

=head1 LICENSE AND COPYRIGHT

Copyright 2009, 2010 Jérôme Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

package main;

#
# Main
#

$rhnc = RHNC::Session->new();

my %func = (
    destroy              => \&destroy,
    gd                   => \&get_details,
    get                  => \&get_details,
    get_details          => \&get_details,
    l                    => \&list,
    li                   => \&list,
    list                 => \&list,
    ls                   => \&list_systems,
    list_systems         => \&list_systems,
    rp                   => \&rm_systems,
    rm_systems           => \&rm_systems,
    llp                  => \&list_latest_packages,
    list_latest_packages => \&list_latest_packages,
);

my @args = @ARGV;
my $cmd  = shift @args;
my $rc;

if ( defined $cmd && defined $func{$cmd} ) {
    $rhnc = RHNC::Session->new();
    $rc   = $func{$cmd}->(@args);
    exit $rc;
}

pod2usage(
    -exitval => 254,
    -verbose  => 99,
    -message => "No or unknown command given"
);

