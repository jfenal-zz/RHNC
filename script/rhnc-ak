#!/usr/bin/perl
use strict;
use warnings;
use lib qw( . .. lib ../lib );
use RHNC;
use RHNC::Session;
use Carp;
use Getopt::Long qw(GetOptionsFromArray);
use Data::Dumper;

use vars qw($rhnc);


=head1 NAME

rhnc-ak - Operate on Satellite managed activation keys

=head1 USAGE

  rhnc-ak command [options or parameters]

=head1 REQUIRED ARGUMENTS

At least command is required for this script to operate. No shell is
currently offered, although this may come in the future.

=head1 DESCRIPTION

The following commands are available:

=cut

=head2 create

TODO : not implemented yet

=cut

sub create {
    my @args = @_;

    # FIXME : this cannot work as it is. Add argument parsing here
    # using Getopt::Long
    RHNC::ActivationKey->create( rhnc => $rhnc, @args );
}

=head2 destroy

Destroy an activation key.

  rhnc-ak destroy my-activation-key  
  rhnc-ak destroy 1-94704eb5c552ccc1b4fce752fd047c62

=cut

sub destroy {
    my @args = @_;
    my $rc;

    foreach my $kname (@args) {
        my $ak = RHNC::ActivationKey->get( $rhnc, $kname );
        if ( defined $ak ) {
            $rc = $ak->delete( $rhnc, $kname );
        }
    }
    return $rc ? 0 : 1;
}

=head2 list|l

List activation keys.

  rhnc-ak list
  rhnc-ak list -v  : be verbose
  rhnc-ak list -r  : list reactivation keys (sort of, may work or not,
                     based on activation key name in English and French)

=cut

sub list {
    my @args = @_;
    my ( $verbose, $reactivationkey );

    my $result = GetOptionsFromArray(
        \@args,
        'verbose|v'          => \$verbose,
        'reactivationkeys|r' => \$reactivationkey,
    );

    my @akl = RHNC::ActivationKey->list($rhnc);

    my $nr = 0;
  AK:
    foreach my $ak (@akl) {
        my $desc = $ak->description();
        my $isre = 0;

        $isre = 1
          if ( $desc =~ /Kickstart re-activation|-activation du kickstart/ );
        next AK if $isre && !$reactivationkey;
        printf( "%-36s : %s\n", $ak->name(), $ak->description() );
        print Dumper $ak if $verbose;
    }
    print "\n" . scalar(@akl) . " activation or reactivation keys\n";

    return 0;
}


=head1 OPTIONS

See various commands for options available.

=head1 DIAGNOSTICS

See L<EXIT STATUS>.

=head1 EXIT STATUS

TODO. 
This script will return 1 for success, 0 for failure. Not very
consistent for now, likely to change.

=head1 CONFIGURATION

See L<RHNC>.

=head1 DEPENDENCIES

=over 4

=item * L<RHNC>

=item * L<Pod::Usage>

=back

=head1 INCOMPATIBILITIES

See L<RHNC>.

=head1 BUGS AND LIMITATIONS

See L<RHNC>.

=head1 AUTHOR

Jérôme Fenal L<< <jfenal@redhat.com> >>.

=head1 LICENSE AND COPYRIGHT

Copyright 2009, 2010 Jérôme Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

#
# Main
#

$rhnc = RHNC::Session->new();

my %func = (
   '^(?:l|li|lis|list)$' => \&list, 
   '^destroy$' => \&destroy,
);

my @args = @ARGV;
my $cmd  = shift @args;
my $rc;

SWITCH: foreach my $c ($cmd) {
    foreach my $re ( keys %func ) {
        if ( $c =~ m/$re/imxs ) {
            $rc = $func{$re}->(@args);
            last SWITCH;
        }
    }
}

exit $rc;
