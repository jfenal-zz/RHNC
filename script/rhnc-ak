#!/usr/bin/perl
use strict;
use warnings;
use lib qw( . .. lib ../lib );
use RHNC;
use RHNC::Session;
use Carp;
use Getopt::Long qw(:config bundling);
use Pod::Usage;

use vars qw( $rhnc %entitlement );

=head1 NAME

rhnc-ak - Operate on Satellite managed activation keys

=head1 USAGE

  rhnc-ak command [options or parameters]

=head1 REQUIRED ARGUMENTS

At least command is required for this script to operate. No shell is
currently offered, although this may come in the future.

=head1 DESCRIPTION

The following commands are available:

=cut

sub _usage {
    pod2usage( -verbose => 2 );
}

=head2 create

Create an activation key.

  rhnc-ak create [ key ] \
    -e provisioning,monitoring,virt,virt_platform \
     -d description,
    | -v ]                  \ # verbose
    [ -b base_channel ]     \ # label
    [ -l usage_limit ]      \
    [ -u 0|1 ]              \ # universal default
    [ -p packages ],        \ # comma separated list
    [ -c child_channels ],  \ # comma separated list
    [ -g system_groups ],   \ # comma separated list

=cut

sub create {
    local @ARGV = @_;

    my (
        $entitlements, $key,               $base_channel, $usage_limit,
        $description,  $universal_default, $groups,       $child_channels,
        $packages,     $verbose
    );

    $key               = q();
    $universal_default = 0;

    my $result = GetOptions(
        'e|entitlement|entitlements=s' => \$entitlements,
        'd|description=s'              => \$description,
        'b|base_channel=s'             => \$base_channel,
        'l|usage_limit=i'              => \$usage_limit,
        'u|universal_default=i'        => \$universal_default,
        'g|groups=s'                   => \$groups,
        'c|child_channels=s'           => \$child_channels,
        'p|packages=s'                 => \$packages,
        'v|verbose+'                   => \$verbose,
      )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/create'],
      );

    my @e = ();
    if ( defined $entitlements ) {
        @e =
          map { $RHNC::entitlement{$_} } split( m{ [,] }imxs, $entitlements );
    }

    $key = shift @ARGV;

    if ( defined $base_channel ) {
        $base_channel = ( split( m/ [,] /imxs, $base_channel ) )[0];
    }
    else {
        $base_channel = q();
    }
    my $ak = RHNC::ActivationKey->create(
        rhnc => $rhnc,
        ( defined $key && $key ne q() ? ( key => $key ) : () ),
        description        => $description,
        base_channel_label => $base_channel,
        usage_limit        => $usage_limit,
        universal_default  => $universal_default,
        entitlements       => \@e,
    );
    croak "Key not created" if !defined $ak;

    # get it again, as modifying some parameters may have side
    # effects, such as virtualization_host will subscribe to
    # certain channels or add packages, same for provisioning_entitled
    $ak = RHNC::ActivationKey->get( $rhnc, $ak->key );

    $ak->child_channels( add => [ split /,/, $child_channels ] )
      if defined $child_channels;
    $ak->packages( add => [ split /,/, $packages ] ) if defined $packages;
    $ak->system_groups( add => [ split /,/, $groups ] ) if defined $groups;

    # RHNC::ActivationKey->create croaks if create did not work
    if ($verbose) {
        print "Created activation key : " . $ak->key() . "\n";
        if ( $verbose > 1 ) {
            print $ak->as_string;
        }
    }

    return 0;
}

=head2 destroy

Destroy an activation key.

  rhnc-ak destroy my-activation-key  
  rhnc-ak destroy 1-94704eb5c552ccc1b4fce752fd047c62

=cut

sub destroy {
    local @ARGV = @_;
    my $rc;
    my $verbose;
    my $result = GetOptions( 'verbose|v+' => \$verbose, )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/destroy'],
      );

    foreach my $key (@ARGV) {
        my $ak = RHNC::ActivationKey->get( $rhnc, $key );
        if ( defined $ak ) {
            $rc = $ak->destroy( $rhnc, $key );
            if ($verbose) {
                print "Destroyed activation key $key\n";
            }
        }
    }
    return $rc ? 0 : 1;
}

=head2 list

List activation keys.

  rhnc-ak list
  rhnc-ak l
  rhnc-ak list -v  : be verbose
  rhnc-ak list -r  : list reactivation keys (sort of, may work or not,
                     based on activation key description in English and French)

=cut

sub list {
    local @ARGV = @_;
    my ( $verbose, $reactivationkey );

    my $result = GetOptions(
        'verbose|v+'         => \$verbose,
        'reactivationkeys|r' => \$reactivationkey,
      )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/list'],
      );

    my @akl = @{ RHNC::ActivationKey->list($rhnc) };

    my $nr = 0;
  AK:
    foreach my $ak (@akl) {
        my $desc = $ak->description();
        my $isre = 0;

        $isre = 1
          if ( $desc =~ /Kickstart re-activation|-activation du kickstart/ );
        next AK if $isre && !$reactivationkey;
        printf( "%-34s : %s\n", $ak->key(), $ak->description() );
    }
    print "\n" . scalar(@akl) . " activation or reactivation keys\n";

    return 0;
}

=head2 get

Get information about activation key

  rhnc-ak get activationkey
  rhnc-ak get id
  rhnc-ak get_details activationkey
  rhnc-ak get_details id
  rhnc-ak gd activationkey
  rhnc-ak gd id

=cut

sub get {
    local @ARGV = @_;
    my ($verbose);

    my $result = GetOptions( 'verbose|v+' => \$verbose, )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/get'],
      );

    foreach my $key (@ARGV) {
        my $ak = RHNC::ActivationKey->get( $rhnc, $key );
        print $ak->as_string;
    }
    return 0;
}

=head2 set

Set/modify details of an activation key.

  rhnc-ak set               \
    | -v ]                  \ # verbose
    [ -d description ]      \ 
    [ -b base_channel ]     \ # label
    [ -l usage_limit ]      \
    [ -u 0|1 ]              \ # universal default
    [ -e provisioning,monitoring,virt,virt_platform ] \
    [ -p packages ],        \ # comma separated list
    [ -c child_channels ],  \ # comma separated list
    [ -f config_channels ], \ # comma separated list
    activationkey [ activationkey ... ]

Or any one of those options.

=cut

sub set {
    local @ARGV = @_;
    my $rc;
    my (
        $entitlements,   $base_channel,      $usage_limit,
        $description,    $universal_default, $groups,
        $child_channels, $packages,          $verbose,
        $config_channels,
    );

    my $result = GetOptions(
        'e|entitlements:s'      => \$entitlements,
        'd|description=s'       => \$description,
        'b|base_channel=s'      => \$base_channel,
        'l|usage_limit:i'       => \$usage_limit,
        'u|universal_default=i' => \$universal_default,
        'g|groups=s'            => \$groups,
        'c|child_channels=s'    => \$child_channels,
        'f|config_channels=s'   => \$config_channels,
        'p|packages=s'          => \$packages,
        'v|verbose+'            => \$verbose,
      )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/set'],
      );
    if ( defined $base_channel ) {

        # to allow specification of -b , to empty it
        $base_channel = ( split( m/ [,] /imxs, $base_channel ) )[0];
    }

    $rc = 0;
    foreach my $key (@ARGV) {
        my $ak = RHNC::ActivationKey->get( $rhnc, $key );

        $rc += $ak->description($description) ? 0 : 1 if defined $description;
        $rc += $ak->base_channel($base_channel) ? 0 : 2
          if defined $base_channel;

        $ak->usage_limit($usage_limit) if defined $usage_limit;

        $rc += $ak->universal_default($universal_default) ? 0 : 8
          if defined $universal_default;
        $rc +=
          $ak->entitlements(
            [
                map { $RHNC::entitlement{$_} }
                  split( m/ [,] /imxs, $entitlements )
            ]
          )
          ? 0
          : 16
          if defined $entitlements;
        $rc +=
          $ak->child_channels( set => [ split /,/, $child_channels ] ) ? 0 : 32
          if defined $child_channels;
        $rc +=
          $ak->packages( set => [ split /,/, $packages ] )
          ? 0
          : 64
          if defined $packages;
        $rc += $ak->system_groups( set => [ split /,/, $groups ] ) ? 0 : 128
          if defined $groups;

        # get it again, as modifying some parameters may have side
        # effects, such as virtualization_host will subscribe to
        # certain channels or add packages, same for provisioning_entitled
        $ak = RHNC::ActivationKey->get( $rhnc, $ak->key );
        if ($verbose) {
            if ( $verbose > 1 ) {
                print $ak->as_string;
            }
        }

    }
    return $rc;
}

=head2 add

Add incremental details of an activation key.

  rhnc-ak add               \
    | -v ]                  \ # verbose
    [ -c child_channels ],  \ # comma separated list
    [ -g system_groups ],   \ # comma separated list
    [ -p packages ],        \ # comma separated list
    [ -i config_channels ], \ # comma separated list, insert
    [ -e config_channels ], \ # comma separated list, append
    activationkey [ activationkey ... ]

Or any one of those options.

=cut

sub add {
    local @ARGV = @_;
    my $rc;
    my ( $groups, $child_channels, $packages, $insert_config_channels,
        $append_config_channels, $verbose );

    my $result = GetOptions(
        'c|child_channels=s'         => \$child_channels,
        'i|insert_config_channels=s' => \$insert_config_channels,
        'a|append_config_channels=s' => \$append_config_channels,
        'g|groups=s'                 => \$groups,
        'p|packages=s'               => \$packages,
        'v|verbose+'                 => \$verbose,
      )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/add'],
      );

    $rc = 0;
    foreach my $key (@ARGV) {
        my $ak = RHNC::ActivationKey->get( $rhnc, $key );

        $rc +=
          $ak->child_channels( add => [ split /,/, $child_channels ] ) ? 0 : 1
          if defined $child_channels;
        $rc += $ak->packages( add => [ split /,/, $packages ] ) ? 0 : 2
          if defined $packages;
        $rc += $ak->system_groups( add => [ split /,/, $groups ] ) ? 0 : 4
          if defined $groups;
        $rc += $ak->config_channels(
            append => [ split /,/, $append_config_channels ] ) ? 0 : 8
          if defined $append_config_channels;
        $rc += $ak->config_channels(
            insert => [ split /,/, $insert_config_channels ] ) ? 0 : 16
          if defined $insert_config_channels;

        # get it again, as modifying some parameters may have side
        # effects, such as virtualization_host will subscribe to
        # certain channels or add packages, same for provisioning_entitled
        $ak = RHNC::ActivationKey->get( $rhnc, $ak->key );
        if ($verbose) {
            if ( $verbose > 1 ) {
                print $ak->as_string;
            }
        }

    }
    return $rc;
}

=head2 remove

Remove incremental details of an activation key.

  rhnc-ak remove            \
    | -v ]                  \ # verbose
    [ -p packages ],        \ # comma separated list
    [ -c child_channels ],  \ # comma separated list
    [ -g system_groups ],   \ # comma separated list
    activationkey [ activationkey ... ]

Or any one of those options.

=cut

sub remove {
    local @ARGV = @_;
    my $rc;
    my ( $groups, $child_channels, $packages, $config_channels, $verbose );

    my $result = GetOptions(
        'g|groups=s'          => \$groups,
        'c|child_channels=s'  => \$child_channels,
        'p|packages=s'        => \$packages,
        'f|config_channels=s' => \$config_channels,
        'v|verbose+'          => \$verbose,
      )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/remove'],
      );

    $rc = 0;
    foreach my $key (@ARGV) {
        my $ak = RHNC::ActivationKey->get( $rhnc, $key );

        $rc +=
          $ak->child_channels( remove => [ split /,/, $child_channels ] )
          ? 0
          : 1
          if defined $child_channels;
        $rc += $ak->packages( remove => [ split /,/, $packages ] ) ? 0 : 2
          if defined $packages;
        $rc += $ak->system_groups( remove => [ split /,/, $groups ] ) ? 0 : 4
          if defined $groups;
        $rc +=
          $ak->config_channels( remove => [ split /,/, $config_channels ] )
          ? 0
          : 8
          if defined $config_channels;

        # get it again, as modifying some parameters may have side
        # effects, such as virtualization_host will subscribe to
        # certain channels or add packages, same for provisioning_entitled
        $ak = RHNC::ActivationKey->get( $rhnc, $ak->key );
        if ($verbose) {
            if ( $verbose > 1 ) {
                print $ak->as_string;
            }
        }

    }
    return $rc;
}

=head1 OPTIONS

See various commands for options available.

=head1 DIAGNOSTICS

See L<EXIT STATUS>.

=head1 EXIT STATUS

TODO. 
This script will return 1 for success, 0 for failure. Not very
consistent for now, likely to change.

=head1 CONFIGURATION

See L<RHNC>.

=head1 DEPENDENCIES

=over 4

=item * L<RHNC>

=item * L<Pod::Usage>

=back

=head1 INCOMPATIBILITIES

See L<RHNC>.

=head1 BUGS AND LIMITATIONS

See L<RHNC>.

=head1 AUTHOR

Jerome Fenal L<< <jfenal@free.fr> >>.

=head1 LICENSE AND COPYRIGHT

Copyright 2009, 2010 Jerome Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

#
# Main
#

$rhnc = RHNC::Session->new();

my %func = (
    c           => \&create,
    create      => \&create,
    l           => \&list,
    list        => \&list,
    destroy     => \&destroy,
    h           => \&_usage,
    help        => \&_usage,
    get_details => \&get,
    gd          => \&get,
    get         => \&get,
    set         => \&set,
    add         => \&add,
    remove      => \&remove,
);

my @args = @ARGV;
my $cmd  = shift @args;
my $rc   = 249;
if ( defined $cmd && defined $func{$cmd} ) {
    $rhnc = RHNC::Session->new();
    $rc   = $func{$cmd}->(@args);
    exit $rc;
}

pod2usage(
    -exitval => 254,
    -verbose => 99,
    -message => "No or unknown command given"
);

