#!/usr/bin/perl
use strict;
use warnings;
use lib qw( . .. lib ../lib );
use RHNC;
use RHNC::Session;
use Carp;
use Getopt::Long qw(GetOptionsFromArray);
use Pod::Usage;
use Data::Dumper;

use vars qw( $rhnc %entitlement );

my %entitlement = (
    m             => 'monitoring_entitled',
    monitoring    => 'monitoring_entitled',
    p             => 'provisioning_entitled',
    provisioning  => 'provisioning_entitled',
    vp            => 'virtualization_host_platform',
    virt_platform => 'virtualization_host_platform',
    v             => 'virtualization_host',
    virt          => 'virtualization_host',
);

=head1 NAME

rhnc-ak - Operate on Satellite managed activation keys

=head1 USAGE

  rhnc-ak command [options or parameters]

=head1 REQUIRED ARGUMENTS

At least command is required for this script to operate. No shell is
currently offered, although this may come in the future.

=head1 DESCRIPTION

The following commands are available:

=cut

sub _usage {
    pod2usage( -verbose => 2 );
}

=head2 create

Create an activation key.

  rhnc-ak create \
    -e provisioning,monitoring,virt,virt_platform \
     -d description,
    [ -k key_name ],
    [ -b base_channel ],
    [ -l usage_limit ],
    [ -u ],              # define as universal_default

=cut

sub create {
    my @args = @_;

    my ( $entitlements, $name, $base_channel, $usage_limit, $description,
        $universal_default );

    my $result = GetOptionsFromArray(
        \@args,
        'e|entitlement|entitlements=s' => \$entitlements,
        'n|name=s'                     => \$name,
        'd|description=s'              => \$description,
        'b|base_channel=s'             => \$base_channel,
        'l|usage_limit=i'              => \$usage_limit,
        'u|universal_default'          => \$universal_default,
    );

    my @e = map { $entitlement{$_} } split( m/ [,] /imxs, $entitlements );

    my $key = RHNC::ActivationKey->create(
        rhnc => $rhnc,
        ( defined $name ? ( key => $name ) : () ),
        description => $description,
        ( defined $base_channel ? ( base_channel_label => $base_channel ) : () ),
        usage_limit => $usage_limit,
        (
            defined $universal_default
            ? ( universal_default => $universal_default )
            : ()
        ),
        entitlements => [@e],
    );

    # RHNC::ActivationKey->create croaks if create did not work
    print "Created activation key : " . $key->name() . "\n";

    return 0;
}

=head2 destroy

Destroy an activation key.

  rhnc-ak destroy my-activation-key  
  rhnc-ak destroy 1-94704eb5c552ccc1b4fce752fd047c62

=cut

sub destroy {
    my @args = @_;
    my $rc;

    foreach my $kname (@args) {
        my $ak = RHNC::ActivationKey->get( $rhnc, $kname );
        if ( defined $ak ) {
            $rc = $ak->destroy( $rhnc, $kname );
        }
    }
    return $rc ? 0 : 1;
}

=head2 list|l

List activation keys.

  rhnc-ak list
  rhnc-ak list -v  : be verbose
  rhnc-ak list -r  : list reactivation keys (sort of, may work or not,
                     based on activation key name in English and French)

=cut

sub list {
    my @args = @_;
    my ( $verbose, $reactivationkey );

    my $result = GetOptionsFromArray(
        \@args,
        'verbose|v'          => \$verbose,
        'reactivationkeys|r' => \$reactivationkey,
    );

    my @akl = RHNC::ActivationKey->list($rhnc);

    my $nr = 0;
  AK:
    foreach my $ak (@akl) {
        my $desc = $ak->description();
        my $isre = 0;

        $isre = 1
          if ( $desc =~ /Kickstart re-activation|-activation du kickstart/ );
        next AK if $isre && !$reactivationkey;
        printf( "%-34s : %s\n", $ak->name(), $ak->description() );
        print Dumper $ak if $verbose;
    }
    print "\n" . scalar(@akl) . " activation or reactivation keys\n";

    return 0;
}

=head2 get

Get information about activation key

  rhnc-ak get activationkey-name
  rhnc-ak get id

=cut

sub get {
    my @args = @_;
    my ($verbose);

    my $result = GetOptionsFromArray( \@args, 'verbose|v' => \$verbose, );

    foreach my $k (@args) {
        my $ak = RHNC::ActivationKey->get( $rhnc, $k );
        print $ak->as_string;
    }
    return 0;
}

=head1 OPTIONS

See various commands for options available.

=head1 DIAGNOSTICS

See L<EXIT STATUS>.

=head1 EXIT STATUS

TODO. 
This script will return 1 for success, 0 for failure. Not very
consistent for now, likely to change.

=head1 CONFIGURATION

See L<RHNC>.

=head1 DEPENDENCIES

=over 4

=item * L<RHNC>

=item * L<Pod::Usage>

=back

=head1 INCOMPATIBILITIES

See L<RHNC>.

=head1 BUGS AND LIMITATIONS

See L<RHNC>.

=head1 AUTHOR

Jérôme Fenal L<< <jfenal@redhat.com> >>.

=head1 LICENSE AND COPYRIGHT

Copyright 2009, 2010 Jérôme Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

#
# Main
#

$rhnc = RHNC::Session->new();

my %func = (
    c       => \&create,
    create  => \&create,
    l       => \&list,
    list    => \&list,
    destroy => \&destroy,
    h       => \&_usage,
    help    => \&_usage,
    get     => \&get,
);

my @args = @ARGV;
my $cmd  = shift @args;
my $rc;

SWITCH: foreach my $c ($cmd) {
    if ( defined $c && defined $func{$c} ) {
        $rc = $func{$c}->(@args);
    }
    else {
        pod2usage(
            -exitval => 0,
            -message => "No or unknown command given"
        );
    }
}

exit $rc;
