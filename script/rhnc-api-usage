#!/usr/bin/perl
use strict;
use warnings;

use lib qw( . .. lib ../lib );
use English;
use RHNC;
use Pod::Usage;
use Carp;
use Getopt::Long;

use vars qw( $rhnc );

=head1 NAME

rhnc-api-usage - Return API information.

=head1 USAGE

  rhnc-api-usage command

=head1 REQUIRED ARGUMENTS

At least B<command> is required for this script to operate. No shell is
currently offered, although this may come in the future.

=head1 DESCRIPTION

The following commands are available:

=cut

sub _get_calls {
    my @nslist = keys %{ $rhnc->namespaces };
    my %call_usage;

    foreach my $namespace (@nslist) {
        my $calls = $rhnc->calls($namespace);
        foreach my $k ( keys %$calls ) {
            $call_usage{ $namespace . '.' . $calls->{$k}->{name} } = 0;
        }
    }

    return \%call_usage;
}

sub _read_trace_log {
    my ($call_usage, $name, @args) = @_;
    if (! defined $name) {
        $name = '/tmp/rhnc_call_trace.log';
    }
    open my $f, '<', $name or die "Cannot open $name : $OS_ERROR";
    my $line;
    while ( $line = <$f> ){
        my @l = split /\s/, $line;
        $call_usage->{$l[1]} ++;
    }
}

=head1 OPTIONS

See various commands for options available.

=head1 DIAGNOSTICS

See L<EXIT STATUS>.

=head1 EXIT STATUS

This script will return 1 for success, 0 for failure. Not very
consistent for now, likely to change.

=head1 CONFIGURATION

See L<RHNC>.

=head1 DEPENDENCIES

=over 4

=item * L<RHNC>

=item * L<Pod::Usage>

=back

=head1 INCOMPATIBILITIES

See L<RHNC>.

=head1 BUGS AND LIMITATIONS

See L<RHNC>.

=head1 AUTHOR

Jerome Fenal L<< <jfenal@free.fr> >>.

=head1 LICENSE AND COPYRIGHT

Copyright 2009, 2010 Jerome Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

package main;

#
# Main
#

$rhnc = RHNC::Session->new();

my %func = (
    version    => \&version,
    namespaces => \&namespaces,
    calls      => \&calls,
);

my @args = @ARGV;
my $cmd  = shift @args;
my $rc;

if ( defined $cmd && defined $func{$cmd} ) {
    $rhnc = RHNC::Session->new();
    $rc   = $func{$cmd}->(@args);
    exit $rc;
}

#
# Gather possible calls
# 
my $call_usage = _get_calls();
_read_trace_log($call_usage);

# 
# Used calls
#
foreach my $call (sort keys %$call_usage) {
    if (! $call_usage->{$call}) {
        print "$call : Not used\n";
    }
}

