#!/usr/bin/perl
#
# $Id$
#

use strict;
use warnings;

use lib qw( . .. lib ../lib );
use RHNC;
use RHNC::Channel;
use Pod::Usage;
use Carp;
use Getopt::Long qw(GetOptionsFromArray);
use Data::Dumper;

use vars qw( $rhnc );

=head1 NAME

rhnc-channel - Operate on Satellite managed software channels

=head1 USAGE

  rhnc-channel command [options or parameters]

=head1 REQUIRED ARGUMENTS

At least command is required for this script to operate. No shell is
currently offered, although this may come in the future.

=head1 DESCRIPTION

The following commands are available:

=head2 create

Create a new channel

  rhnc-channel create label -n name -s summary -a arch
  rhnc-channel create label -n name -s summary -a arch -p parent_channel_label

=cut

sub create {
    my @args = @_;
    my ( $label, $name, $summary, $arch, $parent );
    my $result = GetOptionsFromArray(
        \@args,
        'n|name=s'    => \$name,
        's|summary=s' => \$summary,
        'a|arch=s'    => \$arch,
        'p|parent=s'  => \$parent,
      )
      or pod2usage(
        -exitval => 3,
        -message => 'Wrong parameters for create',
        -verbose => 1
      );
    $label = shift @args;
    if ( !defined $label ) {
        croak "No defined label ($label) to create a channel";
    }

    if ( !defined $name ) {
        $name = $label;
    }
    if ( !defined $summary ) {
        $summary = $label;
    }

    my $arch_ref = RHNC::Channel->list_arches($rhnc);

    if ( !defined $arch_ref->{$arch} ) {
        $arch = "channel-$arch";
        if ( !defined $arch_ref->{$arch} ) {
            croak "No valid architecture specified";
        }
    }

    # TODO : validate parent channel existence

    my $c = RHNC::Channel->create(
        rhnc      => $rhnc,
        label     => $label,
        name      => $name,
        summary   => $summary,
        arch_name => $arch,
        ( defined $parent ? ( parent_channel_label => $parent ) : () ),
    );

    if ( ref $c eq 'RHNC::Channel' ) {
        print "Created channel : " . $c->label() . "\n";
        return 0;
    }
    return 254;
}

=head2 destroy

Destroy a channel

  rhnc-channel destroy label [label ...]

=cut

sub destroy {
    my @args = @_;

    foreach my $chan (@args) {
        my $chan = RHNC::Channel->get( $rhnc, $chan );
        if ( defined $chan ) {
            $chan->destroy();
        }
        else {
            return 1;
        }
    }

    return 0;
}

=head2 add_packages

TODO

=cut

sub add_packages {
    carp "not implemented yet";

    return;
}

=head2 get|gd|get_details

Print detailed information about the given channel(s).

  rhnc-channel gd channel
  rhnc-channel get channel
  rhnc-channel get_details channel

=cut

sub get_details {
    my @args = @_;

    my $chan;
    while ( $chan = shift @args ) {
        print "$chan:\n";
        my $channel = RHNC::Channel->get( $rhnc, $chan );
        if ( defined $channel ) {
            foreach my $c ( sort ( keys %{$channel} ) ) {
                next if $c eq 'rhnc';
                if ( $c eq 'packages' ) {
                    print "  $c: " . $channel->packages() . "\n";
                }
                else {
                    print "  $c : $channel->{$c}\n"
                      if defined $channel->{$c};
                }
            }
        }
        else {
            croak "Channel $chan does not exist";
        }
    }

    return 0;
}

=head2 l|list

List channels

Options: 

=over 4

=item * C<-v|--verbose> : be verbose

=item * C<-a|--all> : list all channels, including those with no
system subscribed.

=back

=cut

sub list {
    my @args = @_;
    my ( $verbose, $all );

    my $result = GetOptionsFromArray(
        \@args,
        'verbose|v' => \$verbose,
        'all|a'     => \$all,
    );

    my @channel = RHNC::Channel->list($rhnc);

    my $nr = 0;

    # sort { $a->{label} cmp $b->{label} }
    foreach my $chan (@channel) {
        my $systems = $chan->systems();
        my $parent  = $chan->parent_label();
        my $format;

        if ( $systems != 0 || $all ) {
            if ($verbose) {
                if ( $parent eq q() ) {
                    $format = "%-48s: %5d pkg, %5d systems, %s, %-40s\n",;
                }
                else {
                    $format = "  %-46s: %5d pkg, %5d systems, %s, %-40s\n",;
                }
                printf( $format,
                    $chan->label(),   $chan->packages(),
                    $chan->systems(), $chan->provider_name(),
                    $chan->name(), );
            }
            else {
                if ( $parent ne q() ) {
                    print q(  );
                }
                print $chan->label() . "\n";
            }
        }
    }

    if ($verbose) {
        print "\nTotal: " . scalar(@channel) . " Channels\n";
    }
    return 0;
}

=head2 la|list_arches

Prints a list of available arches.

=cut

sub list_arches {
    my @args = @_;

    my $arch_ref = RHNC::Channel->list_arches($rhnc);

    print "Arches available: \n";
    foreach my $a ( keys %$arch_ref ) {
        print "$a: $arch_ref->{$a}\n";
    }

    return 0;
}

=head2 le|list_errata

List all available errata in the channel(s)

=cut

sub list_errata {
    my @args = @_;
    my $channel;

    while ( $channel = shift @args ) {
        my %errata = RHNC::Channel->list_errata( $rhnc, $channel );
        foreach my $erratum ( sort keys %errata ) {
            print
"$erratum ($errata{$erratum}{issue_date}): $errata{$erratum}{synopsis}\n";
        }
    }

    return 0;
}

=head2 lp|list_packages

List packages (NVRA) in the channel(s)

  rhnc-channel lp channel       # list latest packages NVRA
  rhnc-channel lp -a channel    # list all packages NVRA
  rhnc-channel lp -v channel    # list latest packages NVRA and pkg id
  rhnc-channel lp -av channel   # list all packages NVRA and pkg id

=cut

sub list_packages {
    my @args = @_;
    my $label_or_id;
    my ( $verbose, $all ) = ( 0, 0 );

    my $result = GetOptionsFromArray(
        \@args,
        'verbose|v' => \$verbose,
        'all|a'     => \$all,
      )
      or pod2usage(
        -exitval => 3,
        -message => 'Wrong parameters for list_packages',
        -verbose => 1
      );

    while ( $label_or_id = shift @args ) {
        my $chan = RHNC::Channel::get( $rhnc, $label_or_id );
        my @pkglist;
        if ($all) {
            @pkglist = @{ $chan->list_packages() };
        }
        else {
            @pkglist = @{ $chan->latest_packages() };

        }

        if ($verbose) {
            print 'Packages for channel ' . $chan->label() . "\n";
        }
        foreach my $pkg (@pkglist) {
            print $pkg->{name} . '-'
              . $pkg->{version} . '-'
              . $pkg->{release} . '-'
              . $pkg->{arch_label};
            if ($verbose) {
                print ": $pkg->{id}";
            }
            if ($all) {
                print ", $pkg->{last_modified}";
            }
            print "\n";
        }
    }

    return 0;
}

=head2 ls|list_systems

List the systems subscribed to the channel(s).

=cut

sub list_systems {
    my @args = @_;
    my $channel;

    while ( $channel = shift @args ) {
        my %systems = RHNC::Channel->list_systems( $rhnc, $channel );
        foreach my $system ( sort keys %systems ) {
            print "$system: $systems{$system}\n";
        }
    }

    return 0;
}

=head2 rm_packages

TODO

=cut

sub rm_packages {
    my @args = @_;

    carp "not implemented yet";

    return 0;
}

=head1 OPTIONS

See various commands for options available.

=head1 DIAGNOSTICS

See L<EXIT STATUS>.

=head1 EXIT STATUS

TODO. 
This script will return 1 for success, 0 for failure. Not very
consistent for now, likely to change.

=head1 CONFIGURATION

See L<RHNC>.

=head1 DEPENDENCIES

=over 4

=item * L<RHNC>

=item * L<Pod::Usage>

=back

=head1 INCOMPATIBILITIES

See L<RHNC>.

=head1 BUGS AND LIMITATIONS

See L<RHNC>.

=head1 AUTHOR

Jérôme Fenal L<< <jfenal@redhat.com> >>.

=head1 LICENSE AND COPYRIGHT

Copyright 2009, 2010 Jérôme Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

package main;

#
# Main
#
my %func = (
    ap            => \&add_packages,
    addpkg        => \&add_packages,
    add_package   => \&add_packages,
    add_packages  => \&add_packages,
    c             => \&create,
    create        => \&create,
    d             => \&destroy,
    destroy       => \&destroy,
    get           => \&get_details,
    gd            => \&get_details,
    get_details   => \&get_details,
    l             => \&list,
    list          => \&list,
    la            => \&list_arches,
    list_arches   => \&list_arches,
    le            => \&list_errata,
    list_errata   => \&list_errata,
    lp            => \&list_packages,
    list_packages => \&list_packages,
    ls            => \&list_systems,
    list_systems  => \&list_systems,
    rp            => \&rm_packages,
    rm_packages   => \&rm_packages,
);

my @args = @ARGV;
my $cmd  = shift @args;
my $rc   = 249;

if ( defined $cmd && defined $func{$cmd} ) {
    $rhnc = RHNC::Session->new();
    $rc   = $func{$cmd}->(@args);
    exit $rc;
}

pod2usage( -exitval => 0, -message => "No or unknown command given" );

