#!/usr/bin/perl
use lib qw( . .. lib ../lib );
use RHNC;
use RHNC::Session;
use RHNC::Channel;
use Carp;
use Getopt::Long qw(GetOptionsFromArray);
use Data::Dumper;

use vars qw($rhnc);

#
# Subs
#

=head2 add_packages

TODO

=cut

sub add_packages {
    croak "not implemented yet";
    1;
}

sub create {
    my @args = @_;

    # FIXME : this cannot work as it is. Add argument parsing here
    # using Getopt::Long
    RHNC::Channel->create( rhnc => $rhnc, @args );
}

sub destroy {
    my @args = @_;

    foreach my $kname (@args) {
        my $chan = RHNC::Channel->get( $rhnc, $kname );
        if ( defined $chan ) {
            $chan->delete( $rhnc, $kname );
        }
    }

    return 1;
}

=head2 get_detail_packages

TODO

=cut

sub get_detail_packages {
    my @args = @_;

    carp "not implemented yet";
    1;
}

=head2 get_details

TODO

=cut

sub get_details {
    my @args = @_;

    print "gd|GetDetails\n";
    print "=============\n";
    
    my $chan;
    while ($chan = shift @args) {
        print "$chan:\n";
        my $channel = RHNC::Channel::get( $rhnc, $chan );
        $channel->nbpackages();
        foreach my $k (sort ( keys %{$channel}) ) {
            next if $k eq 'rhnc';
            if ( $k eq 'packages' ) {
                print "$k: ";
                %pkg = map{ $_->{name} => 1 } @{$channel->{$k}};
                print join (', ',  sort keys %pkg );
                print "\n";
            }
            else {
                print "  $k : $channel->{$k}\n";
            }
        }
    }
}

=head2 list

List channels

=cut

sub list {
    my @args = @_;
    my ( $verbose, $reactivationkey );

    my $result = GetOptionsFromArray( \@args, 'verbose|v' => \$verbose, );

    my @channel = RHNC::Channel->list($rhnc);

    my $nr = 0;
    foreach my $chan (@channel) {
        my $parent = $chan->parent_label();
        my $child = $chan->label();
        if ($parent ne '') { print "\t"; }
        printf( "%-44s: %5d pkg, %5d systems, %s, %-40s\n",
            $chan->label(), $chan->nbpackages(), $chan->systems(),
            $chan->provider_name(), $chan->name(), );
        print Dumper $chan if $verbose;
    }
    print "\n" . scalar(@channel) . " Channels\n";
}

=head2 list_arches

TODO

=cut

sub list_arches {
    my @args = @_;

    carp "not implemented yet";
    1;
}

=head2 list_errata

TODO

=cut

sub list_errata {
    my @args = @_;

    carp "not implemented yet";
    1;
}

=head2 list_last_packages

TODO

=cut

sub list_last_packages {
    my @args = @_;

    carp "not implemented yet";
    1;
}

=head2 list_packages

TODO

=cut

sub list_packages {
    my @args = @_;
    my $label_or_id;
    while ( $label_or_id = shift @args) {
        my $chan = RHNC::Channel::get($rhnc, $label_or_id);
        my @pkglist = $chan->packages();

        print '-' x 60 . "\n";
        print 'Packages for channel ' . $chan->label() . "\n";
        print '-' x 60 . "\n";
        foreach my $pkg ( @pkglist ) {
            print
            "$pkg->{name}-$pkg->{version}-$pkg->{release}-$pkg->{epoch}-$pkg->{arch_label}\n";
        }
    }

    1;
}

=head2 list_systems

TODO

=cut

sub list_systems {
    my @args = @_;

    carp "not implemented yet";
    1;
}

=head2 rm_packages

TODO

=cut

sub rm_packages {
    my @args = @_;

    carp "not implemented yet";
    1;
}

#
# Main
#

$rhnc = RHNC::Session->new();
print "API version : ", $rhnc->apiversion(), " | ";
print "Org ID : ",      $rhnc->org_id(),     "\n";

my @args = @ARGV;
my $cmd  = shift @args;

SWITCH: for ($cmd) {

    #    /create/  && create(@args) && last SWITCH;

## Please see file perltidy.ERR
    /^(?:ap|AddPackages)$/i        && add_packages(@args)        && last SWITCH;
    /^(?:c|Create)$/i              && create(@args)              && last SWITCH;
    /^(?:d|Destroy)$/i             && destroy(@args)             && last SWITCH;
    /^(?:gdp|GetDetailPackages)$/i && get_detail_packages(@args) && last SWITCH;
    /^(?:gd|GetDetails)$/i         && get_details(@args)         && last SWITCH;
    /^(?:l|li|lis|list)$/i         && list(@args)                && last SWITCH;
    /^(?:la|ListArches)$/i         && list_arches(@args)         && last SWITCH;
    /^(?:le|ListErrata)$/i         && list_errata(@args)         && last SWITCH;
    /^(?:llp|ListLastPackages)$/i  && list_last_packages(@args)  && last SWITCH;
    /^(?:lp|ListPackages)$/i       && list_packages(@args)       && last SWITCH;
    /^(?:ls|ListSystems)$/i        && list_systems(@args)        && last SWITCH;
    /^(?:rp|RmPackages)$/i         && rm_packages(@args)         && last SWITCH;

    #    /destroy/ && destroy(@args) && last SWITCH;
}

