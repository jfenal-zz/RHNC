#!/usr/bin/perl
#
# $Id$
#

use strict;
use warnings;

use lib qw( . .. lib ../lib );
use RHNC;
use RHNC::Channel;
use Pod::Usage;
use Carp;
use Getopt::Long;
use Data::Dumper;

use vars qw( $rhnc );

=head1 NAME

rhnc-channel - Operate on Satellite managed software channels

=head1 USAGE

  rhnc-channel command [options or parameters]

=head1 REQUIRED ARGUMENTS

At least command is required for this script to operate. No shell is
currently offered, although this may come in the future.

=head1 DESCRIPTION

The following commands are available:

=head2 create

Create a new channel

  rhnc-channel create label -n name -s summary -a arch
  rhnc-channel create label -n name -s summary -a arch -p parent_channel_label

=cut

sub create {
    local @ARGV = @_;

    my ( $label, $name, $summary, $arch, $parent );

    my $result = GetOptions(
        'n|name=s'    => \$name,
        's|summary=s' => \$summary,
        'a|arch=s'    => \$arch,
        'p|parent=s'  => \$parent,
      )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/create'],
      );
    $label = shift @ARGV;
    if ( !defined $label ) {
        croak "No defined label ($label) to create a channel";
    }

    if ( !defined $name ) {
        $name = $label;
    }
    if ( !defined $summary ) {
        $summary = $label;
    }

    my $arch_ref = RHNC::Channel->list_arches($rhnc);

    if ( !defined $arch_ref->{$arch} ) {
        $arch = "channel-$arch";
        if ( !defined $arch_ref->{$arch} ) {
            croak "No valid architecture specified";
        }
    }

    # TODO : validate parent channel existence

    my $c = RHNC::Channel->create(
        rhnc      => $rhnc,
        label     => $label,
        name      => $name,
        summary   => $summary,
        arch_name => $arch,
        ( defined $parent ? ( parent_channel_label => $parent ) : () ),
    );

    if ( ref $c eq 'RHNC::Channel' ) {
        print "Created channel : " . $c->label() . "\n";
        return 0;
    }
    return 254;
}

=head2 destroy

Destroy a channel

  rhnc-channel destroy label [label ...]

=cut

sub destroy {
    my @args = @_;

    foreach my $chan (@args) {
        my $chan = RHNC::Channel->get( $rhnc, $chan );
        if ( defined $chan ) {
            $chan->destroy();
        }
        else {
            return 1;
        }
    }

    return 0;
}

=head2 get|gd|get_details

Print detailed information about the given channel(s).

  rhnc-channel gd channel
  rhnc-channel get channel
  rhnc-channel get_details channel

=cut

sub get_details {
    my @args = @_;

    my $chan;
    while ( $chan = shift @args ) {
        print "$chan:\n";
        my $channel = RHNC::Channel->get( $rhnc, $chan );
        if ( defined $channel ) {
            foreach my $c ( sort ( keys %{$channel} ) ) {
                next if $c eq 'rhnc';
                if ( $c eq 'packages' ) {
                    print "  $c: " . $channel->packages() . "\n";
                }
                else {
                    print "  $c : $channel->{$c}\n"
                      if defined $channel->{$c};
                }
            }
        }
        else {
            croak "Channel $chan does not exist";
        }
    }

    return 0;
}

=head2 l|list

List channels

Options: 

=over 4

=item * C<-v|--verbose> : be verbose

=item * C<-a|--all> : list all channels, including those with no
system subscribed.

=back

=cut

sub list {
    local @ARGV = @_;
    my ( $verbose, $all ) = ( 0, 0 );

    my $result = GetOptions(
        'verbose|v+' => \$verbose,
        'all|a'      => \$all,
      )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/list'],
      );

    my @channel_list = @{ RHNC::Channel->list($rhnc) };

    my $nr = 0;

    # sort { $a->{label} cmp $b->{label} }
    foreach my $chan (@channel_list) {
        my $systems = $chan->systems();
        my $parent  = $chan->parent_label();
        my $format;

        if ( $systems != 0 || $all ) {
            if ( $verbose == 1 ) {
                if ( $parent eq q() ) {
                    $format = "%-48s %7s: %5d pkg, %5d systems\n",;
                }
                else {
                    $format = "  %-46s %7s: %5d pkg, %5d systems\n",;
                }
                printf( $format,
                    $chan->label(),    '(' . $chan->id() . ')',
                    $chan->packages(), $chan->systems(),
                );
            }
            elsif ( $verbose == 2 ) {
                if ( $parent eq q() ) {
                    $format = "%-48s (%5d): %5d pkg, %5d systems, %s, %-40s\n",;
                }
                else {
                    $format =
                      "  %-46s (%5d): %5d pkg, %5d systems, %s, %-40s\n",;
                }
                printf( $format,
                    $chan->label(), $chan->id(), $chan->packages(),
                    $chan->systems(), $chan->provider_name(), $chan->name(), );
            }
            else {
                if ( $parent ne q() ) {
                    print q(  );
                }
                print $chan->label() . "\n";
            }
        }
    }

    if ($verbose) {
        print "\nTotal: " . scalar(@channel_list) . " Channels\n";
    }
    return 0;
}

=head2 la|list_arches

Prints a list of available arches.

=cut

sub list_arches {
    my @args = @_;

    my $arch_ref = RHNC::Channel->list_arches($rhnc);

    print "Arches available: \n";
    foreach my $a ( keys %$arch_ref ) {
        print "$a: $arch_ref->{$a}\n";
    }

    return 0;
}

=head2 le|list_errata

List all available errata in the channel(s)

=cut

sub list_errata {
    my @args = @_;
    my $channel;

    while ( $channel = shift @args ) {
        my $errata = RHNC::Channel->list_errata( $rhnc, $channel );
        foreach my $erratum ( sort keys %$errata ) {
            print
"$erratum ($errata->{$erratum}{issue_date}): $errata->{$erratum}{synopsis}\n";
        }
    }

    return 0;
}

=head2 lp|list_packages

List packages (NVRA) in the channel(s)

  rhnc-channel lp channel       # list latest packages NVRA
  rhnc-channel lp -a channel    # list all packages NVRA
  rhnc-channel lp -v channel    # list latest packages NVRA and pkg id
  rhnc-channel lp -av channel   # list all packages NVRA and pkg id

=cut

sub list_packages {
    local @ARGV = @_;
    my $label_or_id;
    my ( $verbose, $all ) = ( 0, 0 );

    my $result = GetOptions(
        'verbose|v+' => \$verbose,
        'all|a'     => \$all,
      )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => 'DESCRIPTION/list_packages',
      );

    while ( $label_or_id = shift @ARGV ) {
        my $chan = RHNC::Channel->get( $rhnc, $label_or_id );
        my @pkglist;
        if ($all) {
            @pkglist = @{ $chan->list_packages() };
        }
        else {
            @pkglist = @{ $chan->latest_packages() };

        }

        if ($verbose) {
            print 'Packages for channel ' . $chan->label() . "\n";
        }
        foreach my $pkg (@pkglist) {
            print $pkg->{name} . '-'
              . $pkg->{version} . '-'
              . $pkg->{release} . '.'
              . $pkg->{arch_label};
            if ($verbose) {
                print ": $pkg->{id}";
            }
            if ($all) {
                print ", $pkg->{last_modified}";
            }
            print "\n";
        }
    }

    return 0;
}

=head2 ls|list_systems

List the systems subscribed to the channel(s).

=cut

sub list_systems {
    my @args = @_;
    my $channel;

    while ( $channel = shift @args ) {
        my $system_ref = RHNC::Channel->list_systems( $rhnc, $channel );
        foreach my $system ( sort keys %$system_ref ) {
            print "$system: $system_ref->{$system}\n";
        }
    }

    return 0;
}

=head2 add_packages

TODO

=cut

sub add_packages {
    my ( $self, @args ) = @_;
    my @packages;
    while ( my $p = shift @args ) {
        if ( ref $p eq 'ARRAY' ) {
            push @packages, @{$p};
        }
        elsif ( ref $p eq 'SCALAR' ) {
            push @packages, $p;
        }
        else {
            carp 'Should pass arrays or list of packages only, not ' . ref($p);
        }
    }

    my @package_id;
    foreach my $p (@packages) {
        if ( RHNC::Package::is_packageid($p) ) {
            push @package_id, $p;
        }
        elsif ( ref $p eq 'RHNC::Package' ) {
            push @package_id, $p->id();
        }
        else {
            push @package_id, RHNC::Package->get( $self->{rhnc}, $p )->id;
        }
    }

    my $res = 0;
    if ( scalar @package_id ) {
        $res =
          $self->{rhnc}
          ->call( 'channel.software.addPackages', $self->{label}, \@package_id,
          );
    }
    return $res;
}

=head2 rm_packages

TODO

=cut

sub rm_packages {
    my @args = @_;

    carp "not implemented yet";

    return 0;
}

=head1 OPTIONS

See various commands for options available.

=head1 DIAGNOSTICS

See L<EXIT STATUS>.

=head1 EXIT STATUS

This script will return 0 for success, non 0 for failure.

=head1 CONFIGURATION

See L<RHNC>.

=head1 DEPENDENCIES

=over 4

=item * L<RHNC>

=item * L<Pod::Usage>

=back

=head1 INCOMPATIBILITIES

See L<RHNC>.

=head1 BUGS AND LIMITATIONS

See L<RHNC>.

=head1 AUTHOR

Jerome Fenal L<< <jfenal@free.fr> >>.

=head1 LICENSE AND COPYRIGHT

Copyright 2009, 2010 Jerome Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

package main;

#
# Main
#
my %func = (
    ap            => \&add_packages,
    addpkg        => \&add_packages,
    add_package   => \&add_packages,
    add_packages  => \&add_packages,
    c             => \&create,
    create        => \&create,
    d             => \&destroy,
    destroy       => \&destroy,
    get           => \&get_details,
    gd            => \&get_details,
    get_details   => \&get_details,
    l             => \&list,
    list          => \&list,
    la            => \&list_arches,
    list_arches   => \&list_arches,
    le            => \&list_errata,
    list_errata   => \&list_errata,
    lp            => \&list_packages,
    list_packages => \&list_packages,
    ls            => \&list_systems,
    list_systems  => \&list_systems,
    rp            => \&rm_packages,
    rmpkg         => \&rm_packages,
    rm_package    => \&rm_packages,
    rm_packages   => \&rm_packages,
);

my @args = @ARGV;
my $cmd  = shift @args;
my $rc   = 249;

if ( defined $cmd && defined $func{$cmd} ) {
    $rhnc = RHNC::Session->new();
    $rc   = $func{$cmd}->(@args);
    exit $rc;
}

pod2usage(
    -exitval => 254,
    verbose  => 99,
    -message => "No or unknown command given"
);

