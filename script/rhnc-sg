#!/usr/bin/perl
#
# $Id$
#

use strict;
use warnings;

use lib qw( . .. lib ../lib );
use RHNC;
use Pod::Usage;
use Carp;
use Getopt::Long qw(GetOptionsFromArray);
use Data::Dumper;

use vars qw( $rhnc );

=head1 NAME

rhnc-sg - Operate on Satellite managed system groups

=head1 USAGE

  rhnc-sg command [options or parameters]

=head1 REQUIRED ARGUMENTS

At least command is required for this script to operate. No shell is
currently offered, although this may come in the future.

=head1 DESCRIPTION

The following commands are available:

=cut

=head2 add_systems

Add systems to one or multiple system groups.

  rhnc-sg as -s system1,system2 system_group [ sg2 ... ]
  rhnc-sg add_systems -s system1,system2 system_group [ sg2 ... ]

=cut

sub add_systems {
    my @args = @_;
    my ( $name, $systemids, @system_ids );
    my $verbose;

    my $result = GetOptionsFromArray(
        \@args,
        'systemids|s=s' => \$systemids,
        'verbose|v+'    => \$verbose
      )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/add_systems'],
      );

    if ( !defined $systemids ) {

        # No systems to add...
        return 0;
    }

    @system_ids = split( m/ [,] /imxs, $systemids );

    my $rc = 0;
    while ( $name = shift @args ) {
        my $sg = RHNC::SystemGroup->get( $rhnc, $name );
        my $res = $sg->add_systems( \@system_ids );
        $rc += $res ? 0 : 1;
    }
    return $rc;
}

=head2 create

Create a new system group.

  rhnc-sg create -d description -s system1,system2 system_group_name

=cut

sub create {
    my @args = @_;
    my ( $name, $description, $systemids, @system_ids );
    my $verbose;

    my $result = GetOptionsFromArray(
        \@args,
        'description|d=s' => \$description,
        'systemids|s=s'   => \$systemids,
        'verbose|v+'      => \$verbose,
      )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/create'],
      );

    $name = shift @args;

    if ( !defined $name ) {
        croak "No defined name ($name) to create a system group";
    }

    if ( !defined $description ) {
        $description = $name;
    }

    if ( defined $systemids ) {
        @system_ids = split( m/ [,] /imxs, $systemids );
    }
    else {
        @system_ids = ();
    }

    my $rc = RHNC::SystemGroup->create(
        rhnc        => $rhnc,
        name        => $name,
        description => $description,
        system_ids  => \@system_ids,
    );

    return $rc ? 0 : 1;
}

=head2 destroy

Destroy (delete) a system group, or multiple ones.

  rhnc-sg destroy system_group_name [system_group_name2 ...]

=cut

sub destroy {
    my @args = @_;
    my $verbose;

    my $result = GetOptionsFromArray( \@args, 'verbose|v+' => \$verbose, )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/destroy'],
      );

    foreach my $name (@args) {
        my $sg = RHNC::SystemGroup->get( $rhnc, $name );
        if ( defined $sg ) {
            $sg->destroy( $rhnc, $name );
        }
        else {
            print "No such system group $name\n";
        }
    }

    return 0;
}

=head2 get

Print detailed information about the given systemgroup(s).

  rhnc-sg get [-v] sysgroup
  rhnc-sg gd  [-v] sysgroup
  rhnc-sg get_details [-v] sysgroup

=cut

sub get {
    my @args = @_;
    my $verbose;

    my $result = GetOptionsFromArray( \@args, 'verbose|v+' => \$verbose, )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/get'],
      );

    my $sg;
    while ( $sg = shift @args ) {
        my $systemgroup = RHNC::SystemGroup->get( $rhnc, $sg );
        print $systemgroup->as_string;
    }

    return 0;
}

=head2 list

List system groups.

  rhnc-sg l  [-v]
  rhnc-sg list [-v]

=cut

sub list {
    my @args    = @_;
    my $verbose = 0;

    my $result = GetOptionsFromArray( \@args, 'verbose|v+' => \$verbose, )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/list'],
      );

    my @systemgroup = @{ RHNC::SystemGroup->list($rhnc) };

    my $nr = 0;
    foreach
      my $sg ( sort { $a->system_count() <=> $b->system_count() } @systemgroup )
    {
        if ($verbose) {
            printf( "%-40s (%d-%d): %5d systems, %s\n",
                $sg->name(), $sg->org_id(), $sg->id(),
                $sg->system_count(), $sg->description(), );
        }
        else {
            print $sg->name() . "\n";
        }
    }
    print "\nTotal: " . scalar(@systemgroup) . " system groups\n"
      if $verbose;

    return 0;
}

=head2 list_systems

List the systems inside a system group

  rhnc-sg ls system_group_name [ system_group_name ... ]
  rhnc-sg list_systems system_group_name [ system_group_name ... ]

=cut

sub list_systems {
    my @args = @_;
    my $systemgroup;
    my $verbose = 0;

    my $result = GetOptionsFromArray( \@args, 'verbose|v+' => \$verbose, )
      or pod2usage(
        -exitval  => 254,
        -verbose  => 99,
        -sections => ['DESCRIPTION/list_systems'],
      );

    while ( $systemgroup = shift @args ) {
        my $sg = RHNC::SystemGroup->get( $rhnc, $systemgroup );
        my $slist_ref = $sg->list_systems($rhnc);
        foreach my $s (@$slist_ref) {
            print $s->profile_name() . "\n";
        }
    }

    return 0;
}

=head2 rm_systems

Remove systems from one or multiple system groups.

  rhnc-sg rs -s system1,system2 system_group1 [ sg2 ... ]
  rhnc-sg rm_systems -s system1,system2 system_group1 [ sg2 ... ]
  rhnc-sg remove_systems -s system1,system2 system_group1 [ sg2 ... ]

=cut

sub rm_systems {
    my @args    = @_;
    my $verbose = 0;

    my ( $name, $systemids, @system_ids );
    my $result = GetOptionsFromArray(
        \@args,
        'systemids|s=s' => \$systemids,
        'verbose|v+'    => \$verbose
      )
      or pod2usage(
        -exitval => 254,
        -message => 'Wrong parameters for rm_systems',
        -verbose => 1
      );

    if ( !defined $systemids ) {

        # No systems to remove...
        return 0;
    }

    @system_ids = split( m/ [,] /imxs, $systemids );

    my $rc = 0;
    while ( $name = shift @args ) {
        my $sg = RHNC::SystemGroup->get( $rhnc, $name );
        my $res = $sg->remove_systems( \@system_ids );
        $rc += $res ? 0 : 1;
    }
    return $rc;
}

=head1 OPTIONS

See various commands for options available.

=head1 DIAGNOSTICS

See L<EXIT STATUS>.

=head1 EXIT STATUS

This script returns 0 for success, non 0 for failure.

=head1 CONFIGURATION

See L<RHNC>.

=head1 DEPENDENCIES

=over 4

=item * L<RHNC>

=item * L<Pod::Usage>

=back

=head1 INCOMPATIBILITIES

See L<RHNC>.

=head1 BUGS AND LIMITATIONS

See L<RHNC>.

=head1 AUTHOR

Jérôme Fenal L<< <jfenal@redhat.com> >>.

=head1 LICENSE AND COPYRIGHT

Copyright 2009, 2010 Jérôme Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

package main;

#
# Main
#

$rhnc = RHNC::Session->new();

my %func = (
    c              => \&create,
    create         => \&create,
    d              => \&destroy,
    destroy        => \&destroy,
    get            => \&get,
    gd             => \&get,
    get_details    => \&get,
    l              => \&list,
    list           => \&list,
    ls             => \&list_systems,
    list_systems   => \&list_systems,
    as             => \&add_systems,
    add_system     => \&add_systems,
    add_systems    => \&add_systems,
    rs             => \&rm_systems,
    rm_system      => \&rm_systems,
    rm_systems     => \&rm_systems,
    remove_system  => \&rm_systems,
    remove_systems => \&rm_systems,
);

my @args = @ARGV;
my $cmd  = shift @args;
my $rc;

if ( defined $cmd && defined $func{$cmd} ) {
    $rhnc = RHNC::Session->new();
    $rc   = $func{$cmd}->(@args);
    exit $rc;
}

pod2usage(
    -exitval => 254,
    verbose  => 99,
    -message => "No or unknown command given"
);

