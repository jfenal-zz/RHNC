#!/usr/bin/perl
#
# $Id$
#

use strict;
use warnings;

use lib qw( . .. lib ../lib );
use RHNC;
use Pod::Usage;
use Carp;
use Getopt::Long qw(GetOptionsFromArray);
use Data::Dumper;

use vars qw( $rhnc );

=head1 NAME

rhnc-sg - Operate on Satellite managed system groups

=head1 USAGE

  rhnc-sg command [options or parameters]

=head1 REQUIRED ARGUMENTS

At least command is required for this script to operate. No shell is
currently offered, although this may come in the future.

=head1 DESCRIPTION

The following commands are available:

=cut

sub _usage {
    pod2usage( -exit => 0, -verbose => 2 );
}

=head2 add_systems

Add systems to one or multiple system groups.

  rhnc-sg as -s system1,system2 system_group [ sg2 ... ]
  rhnc-sg add_systems -s system1,system2 system_group [ sg2 ... ]

=cut

sub add_systems {
    my @args = @_;

    my ( $name, $systemids, @system_ids );
    my $result = GetOptionsFromArray( \@args, 'systemids|s=s' => \$systemids, )
      or pod2usage(
        -exitval => 3,
        -message => 'Wrong parameters for add_systems',
        -verbose => 1
      );

    if ( !defined $systemids ) {

        # No systems to add...
        return 0;
    }

    @system_ids = split( m/ [,] /imxs, $systemids );

    my $rc = 0;
    while ( $name = shift @args ) {
        my $sg = RHNC::SystemGroup->get( $rhnc, $name );
        my $res = $sg->add_systems( \@system_ids );
        $rc += $res ? 0 : 1;
    }
    return $rc;
}

=head2 create

Create a new system group.

  rhnc-sg create -d description -s system1,system2 system_group_name

=cut

sub create {
    my @args = @_;
    my ( $name, $description, $systemids, @system_ids );

    my $result = GetOptionsFromArray(
        \@args,
        'description|d=s' => \$description,
        'systemids|s=s'   => \$systemids,
    );

    $name = shift @args;

    if ( !defined $name ) {
        croak "No defined name ($name) to create a system group";
    }

    if ( !defined $description ) {
        $description = $name;
    }

    if ( defined $systemids ) {
        @system_ids = split( m/ [,] /imxs, $systemids );
    }
    else {
        @system_ids = ();
    }

    my $rc = RHNC::SystemGroup->create(
        rhnc        => $rhnc,
        name        => $name,
        description => $description,
        system_ids  => \@system_ids,
    );

    return $rc ? 0 : 1;
}

=head2 destroy

Destroy (delete) a system group, or multiple ones.

  rhnc-sg destroy system_group_name [system_group_name2 ...]

=cut

sub destroy {
    my @args = @_;

    foreach my $name (@args) {
        my $sg = RHNC::SystemGroup->get( $rhnc, $name );
        if ( defined $sg ) {
            $sg->destroy( $rhnc, $name );
        }
        else {
            print "No such system group $name\n";
        }
    }

    return 0;
}

=head2 get|gd|get_details

Print detailed information about the given systemgroup(s).

=cut

sub get {
    my @args = @_;

    my $sg;
    while ( $sg = shift @args ) {
        print "$sg:\n";
        my $systemgroup = RHNC::SystemGroup->get( $rhnc, $sg );
        foreach my $k ( sort ( keys %{$systemgroup} ) ) {
            next if $k eq 'rhnc';
            print "  $k : $systemgroup->{$k}\n"
              if defined $systemgroup->{$k};
        }
    }

    return 0;
}

=head2 l|list

List system groups

=cut

sub list {
    my @args    = @_;
    my $verbose = 0;

    my $result = GetOptionsFromArray( \@args, 'verbose|v' => \$verbose, );

    my @systemgroup = RHNC::SystemGroup->list($rhnc);

    my $nr = 0;
    foreach
      my $sg ( sort { $a->system_count() <=> $b->system_count() } @systemgroup )
    {
        if ($verbose) {
            printf( "%-40s (%d-%d): %5d systems, %s\n",
                $sg->name(), $sg->org_id(), $sg->id(), $sg->system_count(),
                $sg->description(), );
        }
        else {
            print $sg->name() . "\n";
        }
    }
    print "\nTotal: " . scalar(@systemgroup) . " system groups\n"
      if $verbose;

    return 0;
}

=head2 ls|list_systems

List the systems inside a system group

  rhnc-sg ls system_group_name [ system_group_name ... ]
  rhnc-sg list_systems system_group_name [ system_group_name ... ]

=cut

sub list_systems {
    my @args = @_;
    my $systemgroup;

    while ( $systemgroup = shift @args ) {
        my $sg = RHNC::SystemGroup->get( $rhnc, $systemgroup );
        my $slist_ref = $sg->list_systems($rhnc);
        foreach my $s (@$slist_ref) {
            print $s->name() . "\n";
        }
    }

    return 0;
}

=head2 rm_systems

Remove systems from one or multiple system groups.

  rhnc-sg rs -s system1,system2 system_group1 [ sg2 ... ]
  rhnc-sg rm_systems -s system1,system2 system_group1 [ sg2 ... ]
  rhnc-sg remove_systems -s system1,system2 system_group1 [ sg2 ... ]

=cut

sub rm_systems {
    my @args = @_;

    my ( $name, $systemids, @system_ids );
    my $result = GetOptionsFromArray( \@args, 'systemids|s=s' => \$systemids, )
      or pod2usage(
        -exitval => 3,
        -message => 'Wrong parameters for rm_systems',
        -verbose => 1
      );

    if ( !defined $systemids ) {

        # No systems to remove...
        return 0;
    }

    @system_ids = split( m/ [,] /imxs, $systemids );

    my $rc = 0;
    while ( $name = shift @args ) {
        my $sg = RHNC::SystemGroup->get( $rhnc, $name );
        my $res = $sg->remove_systems( \@system_ids );
        $rc += $res ? 0 : 1;
    }
    return $rc;
}

=head1 OPTIONS

See various commands for options available.

=head1 DIAGNOSTICS

See L<EXIT STATUS>.

=head1 EXIT STATUS

This script returns 0 for success, non 0 for failure.

=head1 CONFIGURATION

See L<RHNC>.

=head1 DEPENDENCIES

=over 4

=item * L<RHNC>

=item * L<Pod::Usage>

=back

=head1 INCOMPATIBILITIES

See L<RHNC>.

=head1 BUGS AND LIMITATIONS

See L<RHNC>.

=head1 AUTHOR

Jérôme Fenal L<< <jfenal@redhat.com> >>.

=head1 LICENSE AND COPYRIGHT

Copyright 2009, 2010 Jérôme Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

package main;

#
# Main
#

$rhnc = RHNC::Session->new();

my %func = (
    help         => \&_usage,
    c            => \&create,
    create       => \&create,
    d            => \&destroy,
    destroy      => \&destroy,
    get          => \&get,
    gd           => \&get,
    get_details  => \&get,
    l            => \&list,
    list         => \&list,
    ls           => \&list_systems,
    list_systems => \&list_systems,
    as           => \&add_systems,
    add_system   => \&add_systems,
    add_systems  => \&add_systems,
    rs           => \&rm_systems,
    rm_system    => \&rm_systems,
    rm_systems   => \&rm_systems,
    remove_system    => \&rm_systems,
    remove_systems   => \&rm_systems,
);

my @args = @ARGV;
my $cmd  = shift @args;
my $rc   = 0;

SWITCH: foreach my $c ($cmd) {
    if ( defined $c && defined $func{$c} ) {
        $rc = $func{$c}->(@args);
    }
    else {
        pod2usage( -exitval => 0, -message => "No or unknown command given" );
    }
}

exit $rc;
