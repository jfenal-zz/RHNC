#!/usr/bin/perl
#
# $Id$
#

use strict;
use warnings;

use lib qw( . .. lib ../lib );
use RHNC;
use Pod::Usage;
use Carp;
use Getopt::Long qw(GetOptionsFromArray);
use Data::Dumper;

use vars qw( $rhnc );

=head1 NAME

rhnc-sg - Operate on Satellite managed system groups

=head1 USAGE

  rhnc-sg command [options or parameters]

=head1 REQUIRED ARGUMENTS

At least command is required for this script to operate. No shell is
currently offered, although this may come in the future.

=head1 DESCRIPTION

The following commands are available:

=cut

sub _usage {
    pod2usage( -verbose => 2 );
}

=head2 add_systems

TODO

=cut

sub add_systems {
    my @args = @_;

    my ( $name, $systemids, @system_ids );
    my $result = GetOptionsFromArray(
        \@args,
        'systemids|s=s'   => \$systemids,
    );

    if ( ! defined $systemids ) {
        # No systems to add...
        return 0;
    }

    @system_ids = split( m/ [,] /imxs, $systemids );

    my $res;
    while ($name = shift @args) {
        my $sg = RHNC::SystemGroup->get($rhnc, $name);
        $res += $sg->add_systems( \@system_ids ) ? 0 : 1;
    }
    return $res;
}

=head2 create

Create a new system group.

  rhnc-sg create -d description -s system_id1,system_id2 system_group_name

=cut

sub create {
    my @args = @_;
    my ( $name, $description, $systemids, @system_ids );

    my $result = GetOptionsFromArray(
        \@args,
        'description|d=s' => \$description,
        'systemids|s=s'   => \$systemids,
    );

    $name = shift @args;

    if ( !defined $name ) {
        croak "No defined name ($name) to create a system group";
    }

    if ( !defined $description ) {
        $description = $name;
    }

    if ( defined $systemids ) {
        @system_ids = split( m/ [,] /imxs, $systemids );
    }
    else {
        @system_ids = ();
    }

    # FIXME : this cannot work as it is. Add argument parsing here
    # using Getopt::Long
    my $rc = RHNC::SystemGroup->create(
        rhnc        => $rhnc,
        name        => $name,
        description => $description,
        system_ids  => \@system_ids,
    );

    return $rc ? 0 : 1;
}

=head2 destroy

Destroy (delete) a system group.

=cut

sub destroy {
    my @args = @_;

    foreach my $kname (@args) {
        my $sg = RHNC::SystemGroup->get( $rhnc, $kname );
        if ( defined $sg ) {
            $sg->destroy( $rhnc, $kname );
        }
    }

    return 0;
}

=head2 get|gd|get_details

Print detailed information about the given systemgroup(s).

=cut

sub get {
    my @args = @_;

    my $sg;
    while ( $sg = shift @args ) {
        print "$sg:\n";
        my $systemgroup = RHNC::SystemGroup->get( $rhnc, $sg );
        foreach my $k ( sort ( keys %{$systemgroup} ) ) {
            next if $k eq 'rhnc';
            if ( $k eq 'packages' ) {
                print "  $k: " . $systemgroup->packages() . "\n";
            }
            else {
                print "  $k : $systemgroup->{$k}\n"
                  if defined $systemgroup->{$k};
            }
        }
    }

    return 0;
}

=head2 l|list

List system groups

=cut

sub list {
    my @args    = @_;
    my $verbose = 0;

    my $result = GetOptionsFromArray( \@args, 'verbose|v' => \$verbose, );

    my @systemgroup = RHNC::SystemGroup->list($rhnc);

    my $nr = 0;
    foreach my $sg (@systemgroup) {
        if ($verbose) {
            printf( "%-40s (%d-%d): %5d systems, %s\n",
                $sg->name(), $sg->org_id(), $sg->id(), $sg->system_count(),
                $sg->description(), );
        }
        else {
            print $sg->name() . "\n";
        }
    }
    print "\nTotal: " . scalar(@systemgroup) . " system groups\n"
      if $verbose;

    return 0;
}

=head2 ls|list_systems

List the systems inside a system group

=cut

sub list_systems {
    my @args = @_;
    my $systemgroup;
    carp "not implemented yet";

    while ( $systemgroup = shift @args ) {
        my %systems = RHNC::SystemGroup->list_systems( $rhnc, $systemgroup );
        foreach my $system ( sort keys %systems ) {
            print "$system: $systems{$system}\n";
        }
    }

    return 0;
}

=head2 rm_system

TODO

=cut

sub rm_system {
    my @args = @_;

    carp "not implemented yet";

    return 0;
}

=head1 OPTIONS

See various commands for options available.

=head1 DIAGNOSTICS

See L<EXIT STATUS>.

=head1 EXIT STATUS

TODO. 
This script will return 1 for success, 0 for failure. Not very
consistent for now, likely to change.

=head1 CONFIGURATION

See L<RHNC>.

=head1 DEPENDENCIES

=over 4

=item * L<RHNC>

=item * L<Pod::Usage>

=back

=head1 INCOMPATIBILITIES

See L<RHNC>.

=head1 BUGS AND LIMITATIONS

See L<RHNC>.

=head1 AUTHOR

Jérôme Fenal L<< <jfenal@redhat.com> >>.

=head1 LICENSE AND COPYRIGHT

Copyright 2009, 2010 Jérôme Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

package main;

#
# Main
#

$rhnc = RHNC::Session->new();

my %func = (
    help         => \&_usage,
    c            => \&create,
    create       => \&create,
    d            => \&destroy,
    destroy      => \&destroy,
    get          => \&get,
    gd           => \&get,
    get_details  => \&get,
    l            => \&list,
    list         => \&list,
    ls           => \&list_systems,
    list_systems => \&list_systems,
    as           => \&add_systems,
    add_system   => \&add_systems,
    add_systems  => \&add_systems,
    rs           => \&rm_systems,
    rm_system    => \&rm_systems,
    rm_systems   => \&rm_systems,
);

my @args = @ARGV;
my $cmd  = shift @args;
my $rc   = 0;

SWITCH: foreach my $c ($cmd) {
    if ( defined $c && defined $func{$c} ) {
        $rc = $func{$c}->(@args);
    }
    else {
        pod2usage( -exitval => 0, -message => "No or unknown command given" );
    }
}

exit $rc;
