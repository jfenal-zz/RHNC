package RHNC::ActivationKey;

# $Id$

use warnings;
use strict;
use Params::Validate;
use Carp;
use Data::Dumper;

use base qw( RHNC );

use vars qw( %properties %valid_prefix );

=head1 NAME

RHNC::ActivationKey - The great new RHNC::ActivationKey!

=head1 VERSION

Version 0.01

=cut

our $VERSION = '0.01';

=head1 SYNOPSIS

Quick summary of what the module does.

Perhaps a little code snippet.

    use RHNC::ActivationKey;

    my $foo = RHNC::ActivationKey->new();
    ...

=head1 DESCRIPTION

A list of functions that can be exported.  You can delete this section
if you don't export anything, such as for a purely object-oriented module.

=head1 SUBROUTINES/METHODS

=head2 new

=cut

#    * string key - Leave empty to have new key autogenerated.
#    * string description
#    * string baseChannelLabel - Leave empty to accept default.
#    * int usageLimit - If unlimited usage is desired, use the create API that does not include the parameter.
#    * array:
#          o
#          o string - Add-on entitlement label to associate with the key.
#                + monitoring_entitled
#                + provisioning_entitled
#                + virtualization_host
#                + virtualization_host_platform
#    * boolean universalDefault

#
# Accessors
#
my %entitlements = map { $_ => 1 }
  qw(monitoring_entitled provisioning_entitled virtualization_host virtualization_host_platform);

use constant {
    MANDATORY => 0,
    DEFAULT   => 1,
    VALIDATE  => 2,
    TRANSFORM => 3,
};

my %properties = (
    rhnc               => [ 0, undef, undef, undef ],
    key                => [ 0, q(),   undef, undef ],
    description        => [ 1, undef, undef, undef ],
    base_channel_label => [ 0, q(),   undef, undef ],
    usage_limit        => [ 0, 0,     undef, undef ],
    entitlements       => [
        1,
        [],
        sub {
            foreach my $p (@_) {
                if ( !defined $entitlements{$p} ) { return 0; }
            }
            return 1;
        },
        undef
    ],
    universal_default => [ 1, $RHNC::_xmlfalse, undef, undef ],
    server_group_ids     => [ 0, [], undef, undef ],
    child_channel_labels => [ 0, [], undef, undef ],
    packages             => [ 0, [], undef, undef ],
    package_names        => [ 0, [], undef, undef ],
);

sub _setdefaults {
    my ( $self, @args ) = @_;

    foreach ( keys %properties ) {
        $self->{$_} = $properties{$_}[DEFAULT];
    }
    return $self;
}

sub new {
    my ( $class, @args ) = @_;
    $class = ref($class) || $class;

    my $self = {};
    bless $self, $class;

    my %v = map { $_ => 0 } ( keys %properties );

    $self->_setdefaults();
    my %p = validate( @args, \%v );

    # populate object from either @args or default
    for my $i ( keys %properties ) {
        if ( defined $p{$i} ) {
            $self->{$i} = $p{$i};
        }
    }

    if ( ! ref($self->{universal_default}) ) {
        if ( $self->{universal_default}  ) {
            $self->{universal_default} = $RHNC::_xmltrue;
        }
        else {
            $self->{universal_default} = $RHNC::_xmlfalse;
        }
    }

    # FIXME : pas la bonne façon de savoir si on veut les créer...
    # peut-être pas la chose à faire par défaut, même...
    if ( defined $self->{rhnc} ) {
        $self->create();
        $self->{rhnc}->manage($self);
    }

    return $self;
}

=head2 name

    $name = $ak->name;

=cut

sub name {
    my ( $self, @p ) = @_;

    if ( !defined $self->{key} ) {
        croak 'key not defined';
    }

    return $self->{key};
}

=head2 description

  $description = $ak->description;

=cut

sub description {
    my ( $self, @p ) = @_;

    if ( !defined $self->{description} ) {
        croak 'description not defined';
    }

    return $self->{description};
}


=head2 universal_default

  $universal_default = $ak->universal_default;

=cut

sub universal_default {
    my ( $self, @p ) = @_;

    if ( defined $self->{universal_default} ) {
        return $self->{universal_default}->value();
    }
    return;
}

=head2 create

    $ak->create();
    $ak = RHNC::ActivationKey->create( @parms );

=cut

sub _missing_parameter {
    my $parm = shift;

    croak "Missing parameter $parm";
}

sub create {
    my ( $self, @args ) = @_;

    if ( !ref $self ) {
        $self = __PACKAGE__->new(@args);
    }

    foreach my $p (qw( )) {
        if ( !defined $self->{$p} ) {
            _missing_parameter($p);
        }
    }

    croak 'No RHNC client to persist to, exiting'
      if !defined $self->{rhnc};

    my $res = $self->{rhnc}->call(
        'activationkey.create', $self->{key},
        $self->{description},   $self->{base_channel_label},
        $self->{entitlements},  $self->{universal_default},
    );
    croak 'Create did not work' if !defined $res;
    $self->{key} = $res;

    return $self;
}

=head2 destroy 

=cut

sub destroy {
    my ( $self, @args ) = @_;

    my $res = $self->{rhnc}->call( 'activationkey.delete', $self->{key} );

    undef $self;

    return 1;
}

=head2 list

=cut

sub list {
    my ( $self, @p ) = @_;
    my $rhnc;

    if ( ref $self eq 'RHNC::ActivationKey' && defined $self->{rhnc} ) {
        # OO context, eg $ak-list
        $rhnc = $self->{rhnc};
    }
    elsif ( ref $self eq 'RHNC::Session' ) {
        # Called as RHNC::ActivationKey::List($rhnc)
        $rhnc = $self;
    }
    elsif ( $self eq __PACKAGE__ && ref($p[0]) eq 'RHNC::Session' ) {
        # Called as RHNC::ActivationKey->List($rhnc)
        $rhnc = shift @p;
    }
    else {
        croak "No RHNC client given here";
    }

    my $res = $rhnc->call( 'activationkey.listActivationKeys' );
    
#    print STDERR Dumper($res);
    my @l;
    foreach my $o (@$res) {
        push @l, RHNC::ActivationKey->new($o);
    }

    return @l;
}

=head2 get

=cut

sub get {
    my ( $self, @p ) = @_;
    my $rhnc;

    if ( ref $self eq 'RHNC::ActivationKey' && defined $self->{rhnc} ) {
        # OO context, eg $ak-list
        $rhnc = $self->{rhnc};
    }
    elsif ( ref $self eq 'RHNC::Session' ) {
        # Called as RHNC::ActivationKey::List($rhnc)
        $rhnc = $self;
    }
    elsif ( $self eq __PACKAGE__ ) {
        # Called as RHNC::ActivationKey->List($rhnc)
        $rhnc = shift @p;
    }
    else {
        croak "No RHNC client given";
    }

    my $k = shift @p
      or croak "No activation key specified in get";

    my $res = $rhnc->call( 'activationkey.getDetails', $k );

    my $ak = __PACKAGE__->new( %{$res} );

    $rhnc->manage($ak);

    return $ak;
}

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

Please report any bugs or feature requests to C<bug-rhn-session at rt.cpan.org>, or through
the web interface at L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=RHNC-Session>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.

=head1 AUTHOR

Jérôme Fenal, C<< <jfenal at redhat.com> >>


=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc RHNC::ActivationKey


You can also look for information at:

=over 4

=item * RT: CPAN's request tracker

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=RHNC-Session>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/RHNC-Session>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/RHNC-Session>

=item * Search CPAN

L<http://search.cpan.org/dist/RHNC-Session/>

=back


=head1 ACKNOWLEDGEMENTS


=head1 LICENSE AND COPYRIGHT

Copyright 2009 Jérôme Fenal, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


=cut

1;    # End of RHNC::ActivationKey
