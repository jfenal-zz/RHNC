
Make RHN::Org->name method setter work (again ?)

- add get method to ConfigChannel ??
- add config channel support to rhnc-ak 
  - add/remove/append config channel.
  - autodeploy or not.
- implement RHNC::Errata & rhnc-errata (create, modify, list, get,
  destroy)
- RHNC::Kickstart->render
- RHNC::System does not manage its objects

----------



http://cpansearch.perl.org/src/FANGLY/Getopt-Declare-1.13/lib/Getopt/Declare.pm

Initialize client at load time if possible :
sub import {
    my ( $class, $defn ) = @_;
    return if @_ < 2 || !length $defn;
    $_[2] = RHNC::Session->new($defn);
    exit(0) unless $_[2];
    delete $_[2]{_internal};
}

Extend Params::Validate usage to replace internals of params checking.

----------

For each object, add a copy_to($rhnc) to copy the object to _another_
Satellite or organisation within the same Satellite.



----------
Remove Getopt::Long 2.36 dependency (and be able to use even RHEL4
Getopt::Long) :

    sub add {
        local @ARGV = @_;            # ! SEE local HERE !
        my $data    = "file.dat";
        my $length  = 24;
        my $verbose = 0;
        my $result  = GetOptions(
            "l|length=i"       => \$length,    # numeric
            "f|file=s"         => \$data,      # string
            "v|verbose" => \$verbose           # flag
        );                                     

        print "$result, $data, $length, $verbose\n";
        my @args = @ARGV;
        print Dumper \@args;
    }


----------

Big change to schedule, once experimented : 
- keep RHNC::Session
- add RHNC::Object as father of all other objects
- RHNC will maintain a hash to all available Sessions ('rhn' or
  'default' being the default one)

  our %_clients;

  $_clients{default} = RHNC::Session(...);
  $_clients{rhnc} = RHNC::Session(...);
  etc..

  FIXME : finish design before doing anything

- RHNC::Object will have a few  methods:
  - rhnc() return the rhnc  object (default or referenced by its name).
  - as_json
  - from_json ??
  - uniqueid, with a global hash :

    %uniqueid_for = (
        RHNC::ActivationKey      => 'key',
        RHNC::Channel            => 'id',
        RHNC::System             => 'id',
        RHNC::System::CustomInfo => 'key',
        RHNC::Org                => 'id',
        RHNC::SystemGroup        => 'name',
        RHNC::Kickstart          => '...',
        RHNC::Session            => sub {
            $self->server . $self->login;
        },

    );
- each object will be managed, and maintained in a global cache via
its uniqueid and class.

----------

Default rhnc :
Once previous change is implemented, make all rhnc references optional,
and as a named parameter, not a positional one, in all methods
requiring it (list, create, etc.).

Implement a "default" session, the first one created in
C<$RHNC::default> if none specified.

Croak where needed if none defined.

----------

perl-JSON & perl-JSON-XS are in EPEL & Fedora.

----------

Canonicalise entitlements handling, as they are hardcoded in AK & KS.

----------

Coverage to bring at 99% if not 100% :

- RHNC::Session
- RHNC::ActivationKey
- RHNC::Kickstart
- RHNC::KickstartTree
- RHNC::Org
- RHNC::Package
- RHNC::System
- RHNC::SystemGroup
- RHNC::Channel

----------

TODO list for the rest :

rhnc-org:
- list_users

rhnc-sg
- add systems from file
- rm systems from file
+ implement rm_systems : done

rhnc-channel
- implement add packages
- add packages from file
- implement rm_packages
- rm packages from file

rhnc-pkg
- search package based on name only (partial/complete)
- search package based on name + version (partial/complete)
- search package based on name + version + release (partial/complete)

rhnc-user :
- create rhnc-user
- modify (setDetails)
- add_user
- del_user
- list_user
- disable_user
- enable_user
- add/remove default_system_group
- add/remove assigned_system_group
- add/remove role


=head1 Quick TODO list.

 Tests :
 - include possibility to test without a Satellite or Spacewalk server

 API :
 - complete API coverage.

 Scripts :
 - complete scripts coverage to allow usage of API from shell.


=head1 Developement Ideas

 With this package, we want to achieve :
 - a command line interface to RHN Satellite
 - automation for export/import task
 
 For systems, we need to :
 - get a list from Satellite, possibly using groups
 - display the list (choose columns ?)
 - FIXME : dumpxml a system to allow for re-registration of the same
   system with same uuid on anonther satellite ?
 - define (and not register, foolproof if uuid not already there)
 
 For system groups, we need to 
 - list
 - define
 - assign systems to a group
 - dumpxml (definition, except membership)
 - loadxml
 
 For activations keys:
 - list
 - display
 - dumpxml (1 or selection)
 - define from dumpxml
 - Prerequisites :
   - Channels & sub-channels (verify at import ??)
   - package list (not to verify, too huge, could be done)
   - Configuration channels (rhncfg-manager)
   - system groups
 
 For kickstarts
 - Kickstart profiles
 - Kickstart snippets (could be done from outside satellite, by
   dumping files into Cobbler directories?)

 For kickstart snippets
 - list
 - dumpxml (one, many)
 - loadxml
 
 Keys : GPG & SSL keys
 Namespace : kickstart.keys
     * listAllKeys
     * create
     * delete
     * getDetails

 System Profiles :
 - list
 - dumpxml
 - loadxml

 Conservation lists:
 - list
 - dumpxml
 - loadxml
 
 Custom System information
 - list all keys (and dump the list)
 - recreate one or all keys from XML
 
 Organisations :
 - search1
 - list
 - create
 - create from XML
 - dumpxml
 - trust(other)




 I wrote some code that pulls from the rhn apis to list errata based
 on 
 the following inputs.

   -system profile (list of rpm packages from a machine)
   -a set start date
   -an end date
   -a channel

                 Some of this code was borrowed from here.....thanks
                 bholden for getting 
                 me started.

                 http://people.redhat.com/bholden/scripts/

                 Hope this is helpful for someone.

=cut


http://github.com/aparsons/spacecmd
http://people.redhat.com/aparsons/

